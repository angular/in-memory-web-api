{"version":3,"sources":["backend.service.ts"],"names":[],"mappings":"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","file":"backend.service.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { Observer }   from 'rxjs/Observer';\nimport 'rxjs/add/operator/delay';\n\nimport { getStatusText, isSuccess, STATUS } from './http-status-codes';\n\nimport {\n  HeadersCore,\n  HttpMethodInterceptorArgs,\n  InMemoryDbService,\n  InMemoryBackendConfig,\n  InMemoryBackendConfigArgs,\n  ParsedUrl,\n  PassThruBackend,\n  removeTrailingSlash,\n  RequestCore,\n  RequestInfo,\n  ResponseInterceptor,\n  ResponseOptions\n} from './interfaces';\n\n/**\n * Base class for in-memory web api back-ends\n * Simulate the behavior of a RESTy web api\n * backed by the simple in-memory data store provided by the injected InMemoryDataService service.\n * Conforms mostly to behavior described here:\n * http://www.restapitutorial.com/lessons/httpmethods.html\n */\nexport abstract class BackendService {\n  protected passThruBackend: PassThruBackend;\n  protected config: InMemoryBackendConfigArgs = new InMemoryBackendConfig();\n  protected db: Object;\n\n  constructor(\n    protected inMemDbService: InMemoryDbService,\n    config: InMemoryBackendConfigArgs = {}\n    ) {\n    this.resetDb();\n\n    const loc = this.getLocation('/');\n    this.config.host = loc.host;         // default to app web server host\n    this.config.rootPath = loc.pathname; // default to path when app is served (e.g.'/')\n    Object.assign(this.config, config);\n    this.setPassThruBackend();\n  }\n\n  ////  protected /////\n\n  /**\n   * Process Request and return an Observable of Http Response object\n   * in the manner of a RESTy web api.\n   *\n   * Expect URI pattern in the form :base/:collectionName/:id?\n   * Examples:\n   *   // for store with a 'customers' collection\n   *   GET api/customers          // all customers\n   *   GET api/customers/42       // the character with id=42\n   *   GET api/customers?name=^j  // 'j' is a regex; returns customers whose name starts with 'j' or 'J'\n   *   GET api/customers.json/42  // ignores the \".json\"\n   *\n   * Also accepts direct commands to the service in which the last segment of the apiBase is the word \"commands\"\n   * Examples:\n   *     POST commands/resetDb,\n   *     GET/POST commands/config - get or (re)set the config\n   *\n   *   HTTP overrides:\n   *     If the injected inMemDbService defines an HTTP method (lowercase)\n   *     The request is forwarded to that method as in\n   *     `inMemDbService.get(httpMethodInterceptorArgs)`\n   *     which must return either an Observable of the response type\n   *     for this http library or null|undefined (which means \"keep processing\").\n   */\n  protected handleRequest(req: RequestCore): Observable<any> {\n\n    const url = req.url;\n    const parser = this.inMemDbService['parseUrl'];\n    const parsed: ParsedUrl = parser ? parser(url) : this.parseUrl(url);\n\n    const collectionName = parsed.collectionName;\n    const collection = this.db[collectionName];\n    const reqInfo: RequestInfo = {\n      req: req,\n      base: parsed.base,\n      collection: collection,\n      collectionName: collectionName,\n      headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n      id: this.parseId(collection, parsed.id),\n      method: this.getRequestMethod(req),\n      query: parsed.query,\n      resourceUrl: parsed.resourceUrl,\n      url: url\n    };\n\n    let resOptions: ResponseOptions;\n\n    if (/commands\\/$/i.test(reqInfo.base)) {\n      return this.commands(reqInfo);\n    }\n\n    if (this.inMemDbService[reqInfo.method]) {\n      // InMemoryDbService has an overriding interceptor for this HTTP method; call it.\n      const interceptorArgs: HttpMethodInterceptorArgs = {\n        requestInfo: reqInfo,\n        db: this.db,\n        config: this.config,\n        passThruBackend: this.passThruBackend\n      };\n      const interceptorResponse = this.inMemDbService[reqInfo.method](interceptorArgs) as Observable<any>;\n\n      if (interceptorResponse) {\n        return this.addDelay(interceptorResponse);\n      }\n    }\n\n    if (reqInfo.collection) {\n      // request is for a collection created by the InMemoryDbService\n      const resOptions$ = this.createResponseOptions$(() => this.collectionHandler(reqInfo));\n      return this.createResponse$(this.addDelay(resOptions$));\n\n    } else if (this.passThruBackend) {\n      // Passes request thru to a \"real\" backend.\n      return this.passThruBackend.handle(req);\n\n    } else {\n      // can't handle this request\n      resOptions = this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `Collection '${collectionName}' not found`);\n      const resOptions$ = this.createResponseOptions$(() => resOptions);\n      return this.createResponse$(this.addDelay(resOptions$));    }\n  }\n\n  /**\n   * return canonical HTTP method name (lowercase) from the request object\n   * e.g. (req.method || 'get').toLowerCase();\n   * @param req - request object from the http call\n   *\n   */\n  protected abstract getRequestMethod(req: any): string;\n\n  /**\n   * Add configured delay to response observable unless delay === 0\n   */\n  protected addDelay(response: Observable<any>): Observable<any> {\n    const delay = this.config.delay;\n    return delay === 0 ? response : response.delay(delay || 500);\n  }\n\n  /**\n   * Apply query/search parameters as a filter over the collection\n   * This impl only supports RegExp queries on string properties of the collection\n   * ANDs the conditions together\n   */\n  protected applyQuery(collection: any[], query: Map<string, string[]>): any[] {\n    // extract filtering conditions - {propertyName, RegExps) - from query/search parameters\n    const conditions: { name: string, rx: RegExp }[] = [];\n    const caseSensitive = this.config.caseSensitiveSearch ? undefined : 'i';\n    query.forEach((value: string[], name: string) => {\n      value.forEach(v => conditions.push({ name, rx: new RegExp(decodeURI(v), caseSensitive) }));\n    });\n\n    const len = conditions.length;\n    if (!len) { return collection; }\n\n    // AND the RegExp conditions\n    return collection.filter(row => {\n      let ok = true;\n      let i = len;\n      while (ok && i) {\n        i -= 1;\n        const cond = conditions[i];\n        ok = cond.rx.test(row[cond.name]);\n      }\n      return ok;\n    });\n  }\n\n  protected bodify(data: any) {\n    const body = this.clone(data);\n    return this.config.dataEncapsulation ? { data: body } : body;\n  }\n\n  protected clone(data: any) {\n    return JSON.parse(JSON.stringify(data));\n  }\n\n  protected collectionHandler(reqInfo: RequestInfo): ResponseOptions {\n    // const req = reqInfo.req;\n      let resOptions: ResponseOptions;\n      switch (reqInfo.method) {\n        case 'get':\n          resOptions = this.get(reqInfo);\n          break;\n        case 'post':\n          resOptions = this.post(reqInfo);\n          break;\n        case 'put':\n          resOptions = this.put(reqInfo);\n          break;\n        case 'delete':\n          resOptions = this.delete(reqInfo);\n          break;\n        default:\n          resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.METHOD_NOT_ALLOWED, 'Method not allowed');\n          break;\n      }\n\n      // If `inMemDbService.responseInterceptor` exists, let it morph the response options\n      if (this.inMemDbService['responseInterceptor']) {\n        resOptions = (this.inMemDbService['responseInterceptor'] as ResponseInterceptor)(resOptions, reqInfo);\n      }\n      return resOptions;\n  }\n\n  /**\n   * When the last segment of the `base` path is \"commands\", the `collectionName` is the command\n   * Example URLs:\n   *   commands/resetdb   // Reset the \"database\" to its original state\n   *   commands/config (GET) // Return this service's config object\n   *   commands/config (!GET) // Update the config (e.g. delay)\n   *\n   * Commands are \"hot\", meaning they are always executed immediately\n   * whether or not someone subscribes to the returned observable\n   *\n   * Usage:\n   *   http.post('commands/resetdb', undefined);\n   *   http.get('commands/config');\n   *   http.post('commands/config', '{\"delay\":1000}');\n   */\n  protected commands(reqInfo: RequestInfo): Observable<any> {\n    const command = reqInfo.collectionName.toLowerCase();\n    const method = reqInfo.method;\n    let resOptions: ResponseOptions;\n\n    switch (command) {\n      case 'resetdb':\n        this.resetDb(reqInfo.req);\n        resOptions = { status: STATUS.OK };\n        break;\n      case 'config':\n        if (method === 'get') {\n          resOptions = {\n            body: this.clone(this.config),\n            status: STATUS.OK\n          };\n        } else {\n          // Be nice ... any other method is a config update\n          const body = this.getJsonBody(reqInfo.req);\n          Object.assign(this.config, body);\n          this.setPassThruBackend();\n          resOptions = { status: STATUS.NO_CONTENT };\n        }\n        break;\n      default:\n        resOptions = this.createErrorResponseOptions(reqInfo.url, STATUS.INTERNAL_SERVER_ERROR, `Unknown command \"${command}\"`);\n    }\n\n    resOptions.url = reqInfo.url;\n\n    const resOptions$ = this.createResponseOptions$(() => resOptions);\n    return this.createResponse$(resOptions$);\n  }\n\n  protected createErrorResponseOptions(url: string, status: number, message: string): ResponseOptions {\n    return {\n      body: { error: `${message}` },\n      url: url,\n      headers: this.createHeaders({ 'Content-Type': 'application/json' }),\n      status: status\n    };\n  }\n\n  /**\n   * Create standard HTTP headers object from hash map of header strings\n   * @param headers\n   */\n  protected abstract createHeaders(headers: {[index: string]: string}): HeadersCore;\n\n  /**\n   * return a search map from a location search string\n   */\n  protected abstract createQuery(search: string): Map<string, string[]>;\n\n  /**\n   * Create an Observable response from response options.\n   */\n  protected abstract createResponse$(resOptions$: Observable<ResponseOptions>): Observable<any>;\n\n  /**\n   * Create an Observable of ResponseOptions.\n   */\n  protected createResponseOptions$(resOptionsFactory: () => ResponseOptions): Observable<ResponseOptions> {\n\n    return new Observable<ResponseOptions>((responseObserver: Observer<ResponseOptions>) => {\n      const resOptions = resOptionsFactory();\n      const status = resOptions.status;\n      try {\n        resOptions.statusText = getStatusText(status);\n      } catch (e) { /* ignore failure */}\n      if (isSuccess(status)) {\n        responseObserver.next(resOptions);\n        responseObserver.complete();\n      } else {\n        responseObserver.error(resOptions);\n      }\n      return () => { }; // unsubscribe function\n    });\n  }\n\n  protected delete({id, collection, collectionName, headers, url}: RequestInfo): ResponseOptions {\n    // tslint:disable-next-line:triple-equals\n    if (id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `Missing \"${collectionName}\" id`);\n    }\n    const exists = this.removeById(collection, id);\n    return {\n      headers: headers,\n      status: (exists || !this.config.delete404) ? STATUS.NO_CONTENT : STATUS.NOT_FOUND\n    };\n  }\n\n  /**\n   *\n   * @param collection\n   * @param id\n   */\n  protected findById<T extends { id: any }>(collection: T[], id: any): T {\n    return collection.find((item: T) => item.id === id);\n  }\n\n  /**\n   * Generate the next available id for item in this collection\n   * @param collection - collection of items with `id` key property\n   * This default implementation assumes integer ids.\n   */\n  protected genId<T extends { id: any }>(collection: T[]): any {\n    let maxId = 0;\n    collection.reduce((prev: any, item: any) => {\n      maxId = Math.max(maxId, typeof item.id === 'number' ? item.id : maxId);\n    }, undefined);\n    return maxId + 1;\n  }\n\n  protected get({ id, query, collection, collectionName, headers, url }: RequestInfo): ResponseOptions {\n    let data = collection;\n\n    // tslint:disable-next-line:triple-equals\n    if (id != undefined && id !== '') {\n      data = this.findById(collection, id);\n    } else if (query) {\n      data = this.applyQuery(collection, query);\n    }\n\n    if (!data) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `'${collectionName}' with id='${id}' not found`);\n    }\n    return {\n      body: this.bodify(data),\n      headers: headers,\n      status: STATUS.OK\n    };\n  }\n\n  protected abstract getJsonBody(req: any): any;\n\n  protected getLocation(href: string) {\n    if (!href.startsWith('http')) {\n      // get the document iff running in browser\n      let doc: Document = (typeof document === 'undefined') ? undefined : document;\n      // add host info to url before parsing.  Use a fake host when not in browser.\n      let base = doc ? doc.location.protocol + '//' + doc.location.host : 'http://fake';\n      href = href.startsWith('/') ? base + href : base + '/' + href;\n    }\n    let uri = this.parseuri(href);\n    let loc = {\n      host: uri.host,\n      protocol: uri.protocol,\n      port: uri.port,\n      pathname: uri.path,\n      search: uri.query ? '?' + uri.query : ''\n    };\n    return loc;\n  };\n\n\n  // Adapted from parseuri package - http://blog.stevenlevithan.com/archives/parseuri\n  protected parseuri(str: string): any {\n    // tslint:disable-next-line:max-line-length\n    const URL_REGEX = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n    const key = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port',\n      'relative', 'path', 'directory', 'file', 'query', 'anchor'];\n    let m = URL_REGEX.exec(str);\n    let uri = {};\n    let i = 14;\n\n    while (i--) { uri[key[i]] = m[i] || ''; }\n    return uri;\n  }\n\n  protected indexOf(collection: any[], id: number) {\n    return collection.findIndex((item: any) => item.id === id);\n  }\n\n  // tries to parse id as number if collection item.id is a number.\n  // returns the original param id otherwise.\n  protected parseId(collection: { id: any }[], id: string): any {\n   if (collection && collection[0] && typeof collection[0].id === 'number') {\n      const idNum = parseFloat(id);\n      return isNaN(idNum) ? id : idNum;\n    }\n    return id;\n  }\n\n  /**\n   * Parses the request URL into a `ParsedUrl` object.\n   * Parsing depends upon certain values of `config`: `apiBase`, `host`, and `urlRoot`.\n   *\n   * Configuring the `apiBase` yields the most interesting changes to `parseUrl` behavior:\n   *   When apiBase=undefined and url='http://localhost/api/collection/42'\n   *     {base: 'api/', collectionName: 'collection', id: '42', ...}\n   *   When apiBase='some/api/root/' and url='http://localhost/some/api/root/collection'\n   *     {base: 'some/api/root/', collectionName: 'collection', id: undefined, ...}\n   *   When apiBase='/' and url='http://localhost/collection'\n   *     {base: '/', collectionName: 'collection', id: undefined, ...}\n   *\n   * The actual api base segment values are ignored. Only the number of segments matters.\n   * The following api base strings are considered identical: 'a/b' ~ 'some/api/' ~ `two/segments'\n   *\n   * To replace this default method, assign your alternative to your InMemDbService['parseUrl']\n   */\n  protected parseUrl(url: string): ParsedUrl {\n    try {\n      const loc = this.getLocation(url);\n      let drop = this.config.rootPath.length;\n      let urlRoot = '';\n      if (loc.host !== this.config.host) {\n        // url for a server on a different host!\n        // assume it's collection is actually here too.\n        drop = 1; // the leading slash\n        urlRoot = loc.protocol + '//' + loc.host + '/';\n      }\n      const path = loc.pathname.substring(drop);\n      const pathSegments = path.split('/');\n      let segmentIx = 0;\n\n      // apiBase: the front part of the path devoted to getting to the api route\n      // Assumes first path segment if no config.apiBase\n      // else ignores as many path segments as are in config.apiBase\n      // Does NOT care what the api base chars actually are.\n      let apiBase: string;\n      // tslint:disable-next-line:triple-equals\n      if (this.config.apiBase == undefined) {\n        apiBase = pathSegments[segmentIx++];\n      } else {\n        apiBase = removeTrailingSlash(this.config.apiBase.trim());\n        if (apiBase) {\n          segmentIx = apiBase.split('/').length;\n        } else {\n          segmentIx = 0; // no api base at all; unwise but allowed.\n        }\n      }\n      apiBase = apiBase + '/';\n\n      let collectionName = pathSegments[segmentIx++];\n      // ignore anything after a '.' (e.g.,the \"json\" in \"customers.json\")\n      collectionName = collectionName && collectionName.split('.')[0];\n\n      const id = pathSegments[segmentIx++];\n      const search = loc.search && loc.search.substr(1);\n      const query = this.createQuery(search);\n      const resourceUrl = urlRoot + apiBase + collectionName + '/';\n      return { base: apiBase, collectionName, id, query, resourceUrl };\n\n    } catch (err) {\n      const msg = `unable to parse url '${url}'; original error: ${err.message}`;\n      throw new Error(msg);\n    }\n  }\n\n  // Create entity\n  // Can update an existing entity too if post409 is false.\n  protected post({ collection, /* collectionName, */ headers, id, req, resourceUrl, url }: RequestInfo): ResponseOptions {\n    const item = this.getJsonBody(req);\n\n    // tslint:disable-next-line:triple-equals\n    if (item.id == undefined) {\n      item.id = id || this.genId(collection);\n    }\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, `Request id does not match item.id`);\n    } else {\n      id = item.id;\n    }\n    const existingIx = this.indexOf(collection, id);\n    const body = this.bodify(item);\n\n    if (existingIx === -1) {\n      collection.push(item);\n      headers.set('Location', resourceUrl + '/' + id);\n      return { headers, body, status: STATUS.CREATED };\n    } else if (this.config.post409) {\n      return this.createErrorResponseOptions(url, STATUS.CONFLICT,\n        `item with id='${id} exists and may not be updated with PUT; use POST instead.`);\n    } else {\n      collection[existingIx] = item;\n      return this.config.post204 ?\n          { headers, status: STATUS.NO_CONTENT } : // successful; no content\n          { headers, body, status: STATUS.OK }; // successful; return entity\n    }\n  }\n\n  // Update existing entity\n  // Can create an entity too if put404 is false.\n  protected put({ id, collection, collectionName, headers, req, url }: RequestInfo): ResponseOptions {\n    const item = this.getJsonBody(req);\n    // tslint:disable-next-line:triple-equals\n    if (item.id == undefined) {\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `Missing '${collectionName}' id`);\n    }\n    if (id && id !== item.id) {\n      return this.createErrorResponseOptions(url, STATUS.BAD_REQUEST, `Request id does not match item.id`);\n    } else {\n      id = item.id;\n    }\n    const existingIx = this.indexOf(collection, id);\n    const body = this.bodify(item);\n\n    if (existingIx > -1) {\n      collection[existingIx] = item;\n      return this.config.put204 ?\n          { headers, status: STATUS.NO_CONTENT } : // successful; no content\n          { headers, body, status: STATUS.OK }; // successful; return entity\n    } else if (this.config.put404) {\n      // item to update not found; use POST to create new item for this id.\n      return this.createErrorResponseOptions(url, STATUS.NOT_FOUND, `id='${id} not found`);\n    } else {\n      // create new item for id not found\n      collection.push(item);\n      return { headers, body, status: STATUS.CREATED };\n    }\n  }\n\n  protected removeById(collection: any[], id: number) {\n    const ix = this.indexOf(collection, id);\n    if (ix > -1) {\n      collection.splice(ix, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Reset the \"database\" to its original state\n   */\n  protected resetDb(req?: {}) {\n    this.db = this.inMemDbService.createDb(req);\n  }\n\n  /**\n   * Sets the function that passes unhandled requests\n   * through to the \"real\" backend if\n   * config.passThruUnknownUrl is true.\n   */\n  protected abstract setPassThruBackend(): void;\n\n}\n"]}