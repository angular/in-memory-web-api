{"version":3,"sources":["http-in-memory-web-api.module.ts"],"names":[],"mappings":"AAAA,6BAAC;AAED,OAAO,EAAE,QAAA,EAAU,QAAA,EAAoC,MAAO,eAAA,CAAgB;AAC9E,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C,OAAO,EAEL,qBAAqB,EACrB,iBAAiB,EAClB,MAAM,cAAA,CAAe;AAEtB,OAAO,EAAE,kBAAA,EAAmB,MAAa,wBAAA,CAAyB;AAElE,4DAA4D;AAC5D,sCAAsC;AACtC,MAAM,yCACJ,QAAU,EACV,SAAW,EACX,OAAS;IAET,IAAM,OAAA,GAAe,IAAI,kBAAA,CAAmB,QAAC,EAAS,SAAA,EAAW,OAAA,CAAQ,CAAC;IAC1E,MAAM,CAAC,OAAW,CAAW;AAC/B,CAAC;AAGD;IAAA;IA4CA,CAAC;IA3CC;;;;;;;;;;;;;;MAcE;IACK,gCAAO,GAAd,UAAe,SAAkC,EAAE,OAAmC;QACpF,MAAM,CAAC;YACL,QAAQ,EAAE,wBAAwB;YAClC,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,iBAAiB,EAAG,QAAQ,EAAE,SAAS,EAAE;gBACpD,EAAE,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,OAAO,EAAE;gBAErD,EAAE,OAAO,EAAE,UAAU;oBACnB,UAAU,EAAE,8BAA8B;oBAC1C,IAAI,EAAE,CAAC,QAAQ,EAAE,iBAAiB,EAAE,qBAAqB,CAAC,EAAC;aAC9D;SACF,CAAC;IACJ,CAAC;IACC;;;;;KAKC;IACI,mCAAU,GAAjB,UAAkB,SAAkC,EAAE,OAAmC;QACvF,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAOH,+BAAC;AAAD,CA5CA,AA4CC;;AANM,mCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,EAAG,EAAE;CAC/B,CAAC;AACF,kBAAkB;AACX,uCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"http-in-memory-web-api.module.js","sourceRoot":"","sourcesContent":["////// Http-Only version ////\n\nimport { Injector, NgModule, ModuleWithProviders, Type } from '@angular/core';\nimport { XHRBackend } from '@angular/http';\n\nimport {\n  InMemoryBackendConfigArgs,\n  InMemoryBackendConfig,\n  InMemoryDbService\n} from './interfaces';\n\nimport { HttpBackendService }       from './http-backend.service';\n\n// Internal - Creates the in-mem backend for the Http module\n// AoT requires factory to be exported\nexport function httpInMemBackendServiceFactory(\n  injector: Injector,\n  dbService: InMemoryDbService,\n  options: InMemoryBackendConfig\n): XHRBackend {\n  const backend: any = new HttpBackendService(injector, dbService, options);\n  return backend as XHRBackend;\n}\n\n\nexport class HttpInMemoryWebApiModule {\n  /**\n  *  Redirect the Angular `Http` XHR calls\n  *  to in-memory data store that implements `InMemoryDbService`.\n  *  with class that implements InMemoryDbService and creates an in-memory database.\n  *\n  *  Usually imported in the root application module.\n  *  Can import in a lazy feature module too, which will shadow modules loaded earlier\n  *\n  * @param {Type} dbCreator - Class that creates seed data for in-memory database. Must implement InMemoryDbService.\n  * @param {InMemoryBackendConfigArgs} [options]\n  *\n  * @example\n  * HttpInMemoryWebApiModule.forRoot(dbCreator);\n  * HttpInMemoryWebApiModule.forRoot(dbCreator, {useValue: {delay:600}});\n  */\n  static forRoot(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs): ModuleWithProviders {\n    return {\n      ngModule: HttpInMemoryWebApiModule,\n      providers: [\n        { provide: InMemoryDbService,  useClass: dbCreator },\n        { provide: InMemoryBackendConfig, useValue: options },\n\n        { provide: XHRBackend,\n          useFactory: httpInMemBackendServiceFactory,\n          deps: [Injector, InMemoryDbService, InMemoryBackendConfig]}\n      ]\n    };\n  }\n    /**\n   *\n   * Enable and configure the in-memory web api in a lazy-loaded feature module.\n   * Same as `forRoot`.\n   * This is a feel-good method so you can follow the Angular style guide for lazy-loaded modules.\n   */\n  static forFeature(dbCreator: Type<InMemoryDbService>, options?: InMemoryBackendConfigArgs): ModuleWithProviders {\n    return HttpInMemoryWebApiModule.forRoot(dbCreator, options);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}